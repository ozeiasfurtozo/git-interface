// Generated by CoffeeScript 1.6.1
var exec, gitExec, options, _;

exec = require('child_process').exec;

_ = require('underscore');

options = {
  cwd: './'
};

gitExec = function(cmd, timeout, callback) {
  var git, result, timer;
  if (timeout == null) {
    timeout = 10000;
  }
  if (typeof timeout === 'function') {
    callback = timeout;
    timeout = 10000;
  }
  result = '';
  timer = setTimeout(function() {
    console.log('timeout call');
    if (!result) {
      return callback(null);
    }
  }, timeout);
  try {
    git = exec("git " + cmd, {
      cwd: options.cwd
    });
    git.stdout.on('data', function(data) {
      return result += data.trim();
    });
    git.stdout.on('error', function(data) {
      return result += data.trim();
    });
    git.stderr.on('data', function(data) {
      return result += data.trim();
    });
    git.stderr.on('error', function(data) {
      return result += data.trim();
    });
    return git.stdout.on('close', function() {
      clearTimeout(timer);
      return typeof callback === "function" ? callback(result) : void 0;
    });
  } catch (error) {
    console.log(error);
    clearTimeout(timer);
    return typeof callback === "function" ? callback(null) : void 0;
  }
};

module.exports = {
  setOptions: function(opt) {
    return _.extend(options, opt);
  },
  getHash: function(fileName, callback) {
    return gitExec("log -n 1 --pretty=\"%H\" -- " + fileName, callback);
  },
  diffMaster: function(fileName, timeout, callback) {
    return gitExec("diff master -- " + fileName, timeout, callback);
  },
  checkout: function(branchName, timeout, callback) {
    return gitExec("checkout " + branchName, timeout, callback);
  },
  getBranchName: function(callback) {
    return gitExec("branch", function(result) {
      return result.split("\n").forEach(function(item) {
        if (item.indexOf('*') === 0) {
          return typeof callback === "function" ? callback(item.replace(/\*\s/g, '')) : void 0;
        }
      });
    });
  },
  createBranch: function(branchName, callback) {
    return gitExec("checkout -b " + branchName, callback);
  },
  add: function(callback) {
    return gitExec("add -A", callback);
  },
  commit: function(message, callback) {
    return gitExec("commit -am '" + message + "'", callback);
  },
  pull: function(callback) {
    return gitExec("pull origin", callback);
  },
  merge: function(branchName, options, callback) {
    if (typeof options === 'function') {
      callback = options;
      options = '';
    }
    return gitExec("merge " + branchName + " " + options, callback);
  },
  push: function(callback) {
    return gitExec("push origin", callback);
  },
  fetch: function(callback) {
    return gitExec("fetch", callback);
  },
  getConflictList: function(callback) {
    return gitExec("diff --name-only --diff-filter=U", function(result) {
      return typeof callback === "function" ? callback(result.split("\n")) : void 0;
    });
  },
  getLastChanges: function(callback) {
    return gitExec('log -n 1 --pretty="%H"', function(hash) {
      return gitExec("difftool " + hash + " --name-status", callback);
    });
  }
};
